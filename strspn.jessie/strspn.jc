
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        ((((s + (n_1 :> integer)).charM :> integer) == 0) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_1 : (\forall charP[..] s_0;
            ((((s_0.charM :> integer) != 0) && valid_str{L}(s_0)) ==>
              valid_str{L}((s_0 + 1)))))
   
  logic uint64 strlen{L}(charP[..] s_1) =
  \at((if (((s_1 + 0).charM :> integer) == 0) then ((0 :> int32) :> uint64) else (
      ((((1 :> int32) :> uint64) :> integer) +
        (strlen{L}((s_1 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_2 : (\forall charP[..] s_2;
            (\forall integer i_1;
              (((valid_str{L}(s_2) && (0 <= i_1)) &&
                 (i_1 < (strlen{L}(s_2) :> integer))) ==>
                (((s_2 + i_1).charM :> integer) != 0)))))
   
  lemma strlen_at_null{L} :
  (_C_3 : (\forall charP[..] s_3;
            (valid_str{L}(s_3) ==>
              (((s_3 + (strlen{L}(s_3) :> integer)).charM :> integer) == 0))))
   
  lemma strlen_shift{L} :
  (_C_4 : (\forall charP[..] s_4;
            (\forall uint64 i_2;
              ((valid_str{L}(s_4) && (i_2 <= strlen{L}(s_4))) ==>
                ((strlen{L}((s_4 + (i_2 :> integer))) :> integer) ==
                  ((strlen{L}(s_4) :> integer) - (i_2 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_5 : (\forall charP[..] s_5;
            (\forall uint64 i_3;
              (((valid_str{L}(s_5) && (0 < (i_3 :> integer))) &&
                 (i_3 <= strlen{L}(s_5))) ==>
                (strlen{L}((s_5 + (i_3 :> integer))) < strlen{L}(s_5))))))
   
  lemma strlen_shift1{L} :
  (_C_6 : (\forall charP[..] s_6;
            ((valid_str{L}(s_6) && ((s_6.charM :> integer) != 0)) ==>
              ((strlen{L}(s_6) :> integer) ==
                (1 + (strlen{L}((s_6 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_7 : (\forall charP[..] s_7;
            (\forall charP[..] sc;
              (((((valid_str{L}(s_7) && valid_str{L}(sc)) &&
                   (\base_block(s_7) == \base_block(sc))) &&
                  ((\base_block(s_7) == \base_block(sc)) &&
                    ((s_7 - sc) <= 0))) &&
                 (\forall integer i_4;
                   (((0 <= i_4) && (i_4 <= (sc - s_7))) ==>
                     (((s_7 + i_4).charM :> integer) != 0)))) ==>
                (strlen{L}(sc) <= strlen{L}(s_7))))))
   
  lemma strlen_main{L} :
  (_C_8 : (\forall charP[..] s_8;
            (\forall uint64 n_2;
              (((valid_str{L}(s_8) &&
                  (((s_8 + (n_2 :> integer)).charM :> integer) == 0)) &&
                 (\forall uint64 i_5;
                   ((i_5 < n_2) ==>
                     (((s_8 + (i_5 :> integer)).charM :> integer) != 0)))) ==>
                (strlen{L}(s_8) == n_2)))))
  
}

uint64 strlen(charP[..] s_0)
  requires (_C_14 : valid_str{Here}(s_0));
behavior default:
  assigns \nothing;
  ensures (_C_9 : ((_C_10 : (\result == strlen{Here}(\at(s_0,Old)))) &&
                    ((_C_12 : (((\at(s_0,Old) + (\result :> integer)).charM :> integer) ==
                                0)) &&
                      (_C_13 : (\forall integer i_6;
                                 (((0 <= i_6) &&
                                    (i_6 < (\result :> integer))) ==>
                                   (((\at(s_0,Old) + i_6).charM :> integer) !=
                                     0)))))));
;

uint64 strspn(charP[..] s_1, charP[..] accept)
  requires ((_C_72 : valid_str{Here}(s_1)) &&
             (_C_73 : valid_str{Here}(accept)));
behavior default:
  assigns \nothing;
  ensures (_C_63 : (((_C_65 : (0 <= (\result :> integer))) &&
                      (_C_66 : (\result <= strlen{Here}(\at(s_1,Old))))) &&
                     (_C_67 : (\forall charP[..] p_1;
                                (\forall charP[..] t_4;
                                  ((((((\base_block(\at(s_1,Old)) ==
                                         \base_block(p_1)) &&
                                        ((\at(s_1,Old) - p_1) <= 0)) &&
                                       ((\base_block(p_1) ==
                                          \base_block((\at(s_1,Old) +
                                                        (\result :> integer)))) &&
                                         ((p_1 -
                                            (\at(s_1,Old) +
                                              (\result :> integer))) <
                                           0))) &&
                                      ((\base_block(\at(accept,Old)) ==
                                         \base_block(t_4)) &&
                                        ((\at(accept,Old) - t_4) <= 0))) &&
                                     ((\base_block(t_4) ==
                                        \base_block((\at(accept,Old) +
                                                      (strlen{Here}(\at(accept,Old)) :> integer)))) &&
                                       ((t_4 -
                                          (\at(accept,Old) +
                                            (strlen{Here}(\at(accept,Old)) :> integer))) <
                                         0))) ==>
                                    (p_1.charM != t_4.charM)))))));
behavior exists:
  assumes (\exists charP[..] p_0;
            (\exists charP[..] t_2;
              ((((((\base_block(s_1) == \base_block(p_0)) &&
                    ((s_1 - p_0) <= 0)) &&
                   ((\base_block(p_0) ==
                      \base_block((s_1 + (strlen{Here}(s_1) :> integer)))) &&
                     ((p_0 - (s_1 + (strlen{Here}(s_1) :> integer))) < 0))) &&
                  ((\base_block(accept) == \base_block(t_2)) &&
                    ((accept - t_2) <= 0))) &&
                 ((\base_block(t_2) ==
                    \base_block((accept + (strlen{Here}(accept) :> integer)))) &&
                   ((t_2 - (accept + (strlen{Here}(accept) :> integer))) < 0))) &&
                (p_0.charM == t_2.charM))));
  ensures (_C_68 : (\exists charP[..] t_3;
                     ((((\base_block(\at(accept,Old)) == \base_block(t_3)) &&
                         ((\at(accept,Old) - t_3) <= 0)) &&
                        ((\base_block(t_3) ==
                           \base_block((\at(accept,Old) +
                                         (strlen{Here}(\at(accept,Old)) :> integer)))) &&
                          ((t_3 -
                             (\at(accept,Old) +
                               (strlen{Here}(\at(accept,Old)) :> integer))) <
                            0))) &&
                       ((\at(s_1,Old) + (\result :> integer)).charM ==
                         t_3.charM))));
behavior not_exists:
  assumes (\forall charP[..] p;
            (\forall charP[..] t_1;
              ((((((\base_block(s_1) == \base_block(p)) && ((s_1 - p) <= 0)) &&
                   ((\base_block(p) ==
                      \base_block((s_1 + (strlen{Here}(s_1) :> integer)))) &&
                     ((p - (s_1 + (strlen{Here}(s_1) :> integer))) < 0))) &&
                  ((\base_block(accept) == \base_block(t_1)) &&
                    ((accept - t_1) <= 0))) &&
                 ((\base_block(t_1) ==
                    \base_block((accept + (strlen{Here}(accept) :> integer)))) &&
                   ((t_1 - (accept + (strlen{Here}(accept) :> integer))) < 0))) ==>
                (p.charM != t_1.charM))));
  ensures (_C_69 : (\result == strlen{Here}(\at(s_1,Old))));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_0;
                                      (\exists charP[..] t_2;
                                        ((((((\base_block(s_1) ==
                                               \base_block(p_0)) &&
                                              ((s_1 - p_0) <= 0)) &&
                                             ((\base_block(p_0) ==
                                                \base_block((s_1 +
                                                              (strlen{Here}(
                                                              s_1) :> integer)))) &&
                                               ((p_0 -
                                                  (s_1 +
                                                    (strlen{Here}(s_1) :> integer))) <
                                                 0))) &&
                                            ((\base_block(accept) ==
                                               \base_block(t_2)) &&
                                              ((accept - t_2) <= 0))) &&
                                           ((\base_block(t_2) ==
                                              \base_block((accept +
                                                            (strlen{Here}(
                                                            accept) :> integer)))) &&
                                             ((t_2 -
                                                (accept +
                                                  (strlen{Here}(accept) :> integer))) <
                                               0))) &&
                                          (p_0.charM == t_2.charM)))) &&
                                     (\forall charP[..] p;
                                       (\forall charP[..] t_1;
                                         ((((((\base_block(s_1) ==
                                                \base_block(p)) &&
                                               ((s_1 - p) <= 0)) &&
                                              ((\base_block(p) ==
                                                 \base_block((s_1 +
                                                               (strlen{Here}(
                                                               s_1) :> integer)))) &&
                                                ((p -
                                                   (s_1 +
                                                     (strlen{Here}(s_1) :> integer))) <
                                                  0))) &&
                                             ((\base_block(accept) ==
                                                \base_block(t_1)) &&
                                               ((accept - t_1) <= 0))) &&
                                            ((\base_block(t_1) ==
                                               \base_block((accept +
                                                             (strlen{Here}(
                                                             accept) :> integer)))) &&
                                              ((t_1 -
                                                 (accept +
                                                   (strlen{Here}(accept) :> integer))) <
                                                0))) ==>
                                           (p.charM != t_1.charM))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p;
                                   (\forall charP[..] t_1;
                                     ((((((\base_block(s_1) ==
                                            \base_block(p)) &&
                                           ((s_1 - p) <= 0)) &&
                                          ((\base_block(p) ==
                                             \base_block((s_1 +
                                                           (strlen{Here}(
                                                           s_1) :> integer)))) &&
                                            ((p -
                                               (s_1 +
                                                 (strlen{Here}(s_1) :> integer))) <
                                              0))) &&
                                         ((\base_block(accept) ==
                                            \base_block(t_1)) &&
                                           ((accept - t_1) <= 0))) &&
                                        ((\base_block(t_1) ==
                                           \base_block((accept +
                                                         (strlen{Here}(
                                                         accept) :> integer)))) &&
                                          ((t_1 -
                                             (accept +
                                               (strlen{Here}(accept) :> integer))) <
                                            0))) ==>
                                       (p.charM != t_1.charM)))) ||
                                  (\exists charP[..] p_0;
                                    (\exists charP[..] t_2;
                                      ((((((\base_block(s_1) ==
                                             \base_block(p_0)) &&
                                            ((s_1 - p_0) <= 0)) &&
                                           ((\base_block(p_0) ==
                                              \base_block((s_1 +
                                                            (strlen{Here}(
                                                            s_1) :> integer)))) &&
                                             ((p_0 -
                                                (s_1 +
                                                  (strlen{Here}(s_1) :> integer))) <
                                               0))) &&
                                          ((\base_block(accept) ==
                                             \base_block(t_2)) &&
                                            ((accept - t_2) <= 0))) &&
                                         ((\base_block(t_2) ==
                                            \base_block((accept +
                                                          (strlen{Here}(
                                                          accept) :> integer)))) &&
                                           ((t_2 -
                                              (accept +
                                                (strlen{Here}(accept) :> integer))) <
                                             0))) &&
                                        (p_0.charM == t_2.charM)))))));
   
   (var charP[..] p);
   
   (var charP[..] a);
   
   (var uint64 count);
   
   (var uint64 __retres);
   
   {  (_C_15 : (count = (0 :> uint64)));
      (_C_16 : (p = s_1));
      
      loop 
      behavior default:
        invariant (_C_23 : (((_C_25 : (\base_block(s_1) == \base_block(p))) &&
                              (_C_26 : ((s_1 - p) <= 0))) &&
                             ((_C_28 : (\base_block(p) ==
                                         \base_block((s_1 +
                                                       (strlen{Here}(
                                                       s_1) :> integer))))) &&
                               (_C_29 : ((p -
                                           (s_1 +
                                             (strlen{Here}(s_1) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_20 : ((_C_21 : (0 <= (count :> integer))) &&
                             (_C_22 : (count <= strlen{Here}(s_1)))));
      behavior default:
        invariant (_C_19 : ((count :> integer) == (p - s_1)));
      behavior default:
        invariant (_C_18 : (\forall charP[..] z;
                             ((((\base_block(s_1) == \base_block(z)) &&
                                 ((s_1 - z) <= 0)) &&
                                ((\base_block(z) == \base_block(p)) &&
                                  ((z - p) < 0))) ==>
                               (\exists charP[..] t_0;
                                 ((((\base_block(accept) == \base_block(t_0)) &&
                                     ((accept - t_0) <= 0)) &&
                                    ((\base_block(t_0) ==
                                       \base_block((accept +
                                                     (strlen{Here}(accept) :> integer)))) &&
                                      ((t_0 -
                                         (accept +
                                           (strlen{Here}(accept) :> integer))) <
                                        0))) &&
                                   (z.charM == t_0.charM))))));
      variant (_C_17 : ((strlen{Here}(s_1) :> integer) - (p - s_1)));
      while (true)
      {  
         {  (if (_C_32 : ((_C_31 : ((_C_30 : p.charM) :> int32)) !=
                           (0 :> int32))) then () else 
            (goto while_0_break));
            
            {  (_C_33 : (a = accept));
               
               loop 
               behavior default:
                 invariant (_C_36 : (((_C_38 : (\base_block(accept) ==
                                                 \base_block(a))) &&
                                       (_C_39 : ((accept - a) <= 0))) &&
                                      ((_C_41 : (\base_block(a) ==
                                                  \base_block((accept +
                                                                (strlen{Here}(
                                                                accept) :> integer))))) &&
                                        (_C_42 : ((a -
                                                    (accept +
                                                      (strlen{Here}(accept) :> integer))) <=
                                                   0)))));
               behavior default:
                 invariant (_C_35 : (\forall charP[..] t;
                                      ((((\base_block(accept) ==
                                           \base_block(t)) &&
                                          ((accept - t) <= 0)) &&
                                         ((\base_block(t) == \base_block(a)) &&
                                           ((t - a) < 0))) ==>
                                        (p.charM != t.charM))));
               variant (_C_34 : ((strlen{Here}(accept) :> integer) -
                                  (a - accept)));
               while (true)
               {  
                  {  (if (_C_45 : ((_C_44 : ((_C_43 : a.charM) :> int32)) !=
                                    (0 :> int32))) then () else 
                     (goto while_1_break));
                     
                     {  (if (_C_50 : ((_C_49 : ((_C_48 : p.charM) :> int32)) ==
                                       (_C_47 : ((_C_46 : a.charM) :> int32)))) then 
                        (goto while_1_break) else ())
                     };
                     (_C_52 : (a = (_C_51 : (a + (1 :> int32)))))
                  }
               };
               (while_1_break : ());
               (if (_C_56 : ((_C_55 : ((_C_54 : a.charM) :> int32)) ==
                              (0 :> int32))) then 
               {  (_C_53 : (__retres = count));
                  
                  (goto return_label)
               } else ());
               (_C_59 : (count = (_C_58 : ((_C_57 : (count + (1 :> uint64))) :> uint64))))
            };
            (_C_61 : (p = (_C_60 : (p + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_62 : (__retres = count));
      (return_label : 
      (return __retres))
   }
}
